from os import listdir, chdir
from lxml import etree


def get_xml_list_from_file_collection():
    temp_xml_list = []
    file_in_dir = listdir(chdir('D:\\Downloads\\lang_files'))
    for file in file_in_dir:
        if file.endswith('.xml'):
            temp_xml_list.append(file)
    temp_xml_list.remove('settings.xml') #remove our settings.xml file from general lang-files
    return(temp_xml_list)


def get_teg_list_from_xml():
    settings = []
    settings_location = listdir(chdir('D:\\Downloads\\lang_files'))
    for file1 in settings_location:
        if file1.endswith('settings.xml'):
            tree = etree.ElementTree(file=file1)
            root = tree.getroot()
            for child_of_root in root.iter():
                settings.append(child_of_root.tag)
    settings.remove('tegs_for_search') #removing teg-wrapper where placed tegs we search
    settings = check_for_double(settings) #now we nevermind if tegs in settings.xml not unique
    return(settings)

def check_for_double(settings):
    seen = set()
    result = []
    for x in settings:
        if x in seen:
            continue
        seen.add(x)
        result.append(x)
    return(result)



def teg_len(teg_for_search): 
    xml_list = get_xml_list_from_file_collection() #get xml list
    tegs_for_search = [str(teg_for_search)] #get teg for search
    result = {}
    for xml in xml_list: 
        #result.fromkeys(['tegs_name', 'len'],str(xml))
        tree = etree.parse('D:\\Downloads\\lang_files\\{0}'.format(str(xml))) #path to dir with lang files
        for teg in tegs_for_search:
            current_xml = tree.xpath('/lang/common/{0}'.format(teg))
            for line in current_xml:
                current_teg_len = len(line.text)
                result.setdefault('lang_file:{}        teg name:{}      tag len:{}'.format(xml,teg,line.text),current_teg_len)
    sorted_result = sorted(result.items(), key=lambda item: item[1]) #sorting by lan
    for i in sorted_result:
        print(i)
        print('\n')



def teg_checker(teg_list):
    xml_list = get_xml_list_from_file_collection() #get xml list
    temp_xml_list = []
    result = {}
    for item_list in teg_list:
        teg_for_search = [str(item_list)] #get teg for search
        for xml in xml_list:
            tree = etree.parse('D:\\Downloads\\lang_files\\{0}'.format(str(xml))) #path to dir with lang files
            for teg in teg_for_search:
                current_xml = tree.xpath('/lang/common/{0}'.format(teg))
                if current_xml == []:
                    #print('Teg "{}" is not in lang_file: {}'.format(teg,xml))
                    result.setdefault(teg, []).append(xml)
    return(result,teg_list)


def double_teg_entrance(is_double):
    result = list(set(get_xml_list_from_file_collection()) - set(is_double))
    if result == []:
        return(1)
    else: return(0)


def print_results(check_result, tegs_not_find):
    tegs_that_fine = []
    for teg in tegs_not_find:
        n = 0 
        if teg in check_result:
            if len(check_result[teg]) == len(get_xml_list_from_file_collection()):
                    print('Element name: {} not find in any lang-files'.format(teg))
            else:
                print('Element name: \n{}\n not in:'.format(teg))
                #print(len(check_result[teg]))
                for lang_filename in check_result[teg]:
                #print('double is:', double_teg_entrance(check_result[teg]))
                    count = n + 1
                    print(count,lang_filename)
                    n = n+1
                print('\n')
        else: tegs_that_fine.append(teg)
    print('\n All are fine with tegs:')
    for teg in tegs_that_fine:
        print(teg)
        
        

    #print(check_result)
    #print(tegs_not_find)



def main():
    try:
        check_result, tegs_not_find = (teg_checker(get_teg_list_from_xml()))
        print_results(check_result,tegs_not_find)
    except etree.XMLSyntaxError as err:
        print("XML syntax error. Error message:\n{0}".format(err))
        print('')

    

if __name__ == '__main__':
    main()
